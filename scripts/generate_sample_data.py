"""Generate sample data for testing the chatbot system"""

import pandas as pd
import random
import json
from pathlib import Path
import sys

# Add src to path
sys.path.append(str(Path(__file__).parent.parent / "src"))

from utils.config import settings

def generate_sample_reviews(num_reviews: int = 200) -> pd.DataFrame:
    """Generate sample customer reviews"""
    
    # Sample review templates
    positive_templates = [
        "Excellent service, tr√®s satisfait de mon achat ! La livraison √©tait rapide et le produit de qualit√©.",
        "Super produit, conforme √† mes attentes. L'√©quipe client est tr√®s professionnelle.",
        "Tr√®s bonne exp√©rience, je recommande vivement ! Prix correct et service impeccable.",
        "Parfait ! Livraison dans les temps et produit exactement comme d√©crit.",
        "Service client au top, ils ont r√©solu mon probl√®me rapidement. Tr√®s content !",
    ]
    
    negative_templates = [
        "Tr√®s d√©√ßu de mon achat. Le produit ne correspond pas √† la description et la qualit√© est mauvaise.",
        "Service client d√©cevant, personne ne r√©pond au t√©l√©phone. Livraison en retard.",
        "Mauvaise qualit√© pour le prix pay√©. Je ne recommande pas ce produit.",
        "Probl√®me avec la commande, produit d√©fectueux re√ßu. Difficile de se faire rembourser.",
        "Service apr√®s-vente inexistant. Tr√®s mauvaise exp√©rience, je ne recommande pas.",
    ]
    
    neutral_templates = [
        "Produit correct sans plus. Rien d'exceptionnel mais fait le travail.",
        "Service standard, pas de probl√®me particulier mais rien d'extraordinaire non plus.",
        "Livraison dans les temps, produit conforme. Exp√©rience normale.",
        "Prix un peu √©lev√© mais qualit√© acceptable. Service client moyen.",
        "Produit correct, correspond √† ce qui √©tait annonc√©. D√©lai de livraison respect√©.",
    ]
    
    # Generate reviews
    reviews = []
    
    for i in range(num_reviews):
        # Randomly choose sentiment
        sentiment_type = random.choices(
            ['positive', 'negative', 'neutral'],
            weights=[0.4, 0.3, 0.3]  # 40% positive, 30% negative, 30% neutral
        )[0]
        
        if sentiment_type == 'positive':
            text = random.choice(positive_templates)
            rating = random.choices([4, 5], weights=[0.3, 0.7])[0]
        elif sentiment_type == 'negative':
            text = random.choice(negative_templates)
            rating = random.choices([1, 2, 3], weights=[0.4, 0.4, 0.2])[0]
        else:  # neutral
            text = random.choice(neutral_templates)
            rating = 3
        
        # Add some variation to the text
        variations = [
            " La commande est arriv√©e rapidement.",
            " Le packaging √©tait soign√©.",
            " J'ai eu quelques questions et le support a bien r√©pondu.",
            " Bon rapport qualit√©-prix.",
            " Interface du site facile √† utiliser.",
            " D√©lai de livraison respect√©.",
        ]
        
        if random.random() < 0.3:  # 30% chance to add variation
            text += random.choice(variations)
        
        # Generate metadata
        review = {
            'id': i + 1,
            'text': text,
            'rating': rating,
            'sentiment_type': sentiment_type,
            'customer_id': f'CUST_{random.randint(1000, 9999)}',
            'product_category': random.choice(['Electronics', 'Clothing', 'Home', 'Sports', 'Books']),
            'date': f'2024-{random.randint(1, 12):02d}-{random.randint(1, 28):02d}',
            'verified_purchase': random.choice([True, False], k=1)[0]
        }
        
        reviews.append(review)
    
    return pd.DataFrame(reviews)

def generate_training_responses(reviews_df: pd.DataFrame) -> pd.DataFrame:
    """Generate training responses for fine-tuning"""
    
    response_templates = {
        'positive': [
            "Merci beaucoup pour ce retour positif ! Nous sommes ravis que vous soyez satisfait de votre achat et de notre service. N'h√©sitez pas √† nous contacter si vous avez besoin d'aide.",
            "C'est formidable d'entendre que vous √™tes content ! Votre satisfaction est notre priorit√©. Merci de nous faire confiance.",
            "Merci pour ces commentaires encourageants ! Nous continuerons √† faire de notre mieux pour maintenir cette qualit√© de service."
        ],
        'negative': [
            "Nous sommes sinc√®rement d√©sol√©s pour cette exp√©rience d√©cevante. Vos commentaires sont pr√©cieux et nous allons examiner ces points pour nous am√©liorer. Pouvons-nous vous contacter pour r√©soudre ce probl√®me ?",
            "Je comprends votre frustration et nous prenons vos pr√©occupations tr√®s au s√©rieux. Notre √©quipe va √©tudier votre cas en priorit√©. Merci de nous donner l'opportunit√© de corriger cette situation.",
            "Nous nous excusons pour les d√©sagr√©ments caus√©s. Cette exp√©rience ne refl√®te pas nos standards habituels. Nous aimerions rectifier la situation rapidement."
        ],
        'neutral': [
            "Merci pour votre retour. Nous appr√©cions que vous ayez pris le temps de partager votre exp√©rience. Si vous avez des suggestions d'am√©lioration, nous serions ravis de les entendre.",
            "Nous prenons note de vos commentaires. Notre objectif est de d√©passer vos attentes et nous travaillons constamment √† am√©liorer nos services.",
            "Merci pour ce retour constructif. Nous restons √† votre disposition si vous avez des questions ou des besoins sp√©cifiques."
        ]
    }
    
    training_data = []
    
    for _, review in reviews_df.iterrows():
        sentiment_type = review['sentiment_type']
        text = review['text']
        rating = review['rating']
        
        # Choose appropriate response
        response = random.choice(response_templates[sentiment_type])
        
        # Add specific elements based on review content
        if 'livraison' in text.lower() and sentiment_type == 'negative':
            response += " Notre √©quipe logistique sera inform√©e pour √©viter ce type de probl√®me √† l'avenir."
        elif 'qualit√©' in text.lower() and sentiment_type == 'negative':
            response += " Nous allons transmettre vos remarques √† notre √©quipe qualit√©."
        elif 'service' in text.lower() and sentiment_type == 'negative':
            response += " Nous allons former notre √©quipe pour am√©liorer l'exp√©rience client."
        
        training_data.append({
            'review_id': review['id'],
            'text': text,
            'rating': rating,
            'response': response,
            'sentiment_type': sentiment_type
        })
    
    return pd.DataFrame(training_data)

def main():
    """Generate and save sample data"""
    print("üöÄ G√©n√©ration des donn√©es d'exemple...")
    
    # Create directories
    settings.RAW_DATA_DIR.mkdir(parents=True, exist_ok=True)
    settings.PROCESSED_DATA_DIR.mkdir(parents=True, exist_ok=True)
    
    # Generate sample reviews
    print("üìù G√©n√©ration des avis clients...")
    reviews_df = generate_sample_reviews(200)
    
    # Generate training responses
    print("ü§ñ G√©n√©ration des r√©ponses d'entra√Ænement...")
    training_df = generate_training_responses(reviews_df)
    
    # Save data
    reviews_path = settings.RAW_DATA_DIR / "sample_reviews.csv"
    training_path = settings.RAW_DATA_DIR / "training_responses.csv"
    
    reviews_df.to_csv(reviews_path, index=False, encoding='utf-8')
    training_df.to_csv(training_path, index=False, encoding='utf-8')
    
    print(f"‚úÖ Donn√©es sauvegard√©es :")
    print(f"   - Avis clients : {reviews_path} ({len(reviews_df)} avis)")
    print(f"   - R√©ponses d'entra√Ænement : {training_path} ({len(training_df)} exemples)")
    
    # Generate summary statistics
    print(f"\nüìä Statistiques :")
    print(f"   - Avis positifs : {len(reviews_df[reviews_df['sentiment_type'] == 'positive'])}")
    print(f"   - Avis n√©gatifs : {len(reviews_df[reviews_df['sentiment_type'] == 'negative'])}")
    print(f"   - Avis neutres : {len(reviews_df[reviews_df['sentiment_type'] == 'neutral'])}")
    print(f"   - Note moyenne : {reviews_df['rating'].mean():.2f}")
    
    # Save metadata
    metadata = {
        'generation_date': '2024-01-01',
        'num_reviews': len(reviews_df),
        'num_training_examples': len(training_df),
        'sentiment_distribution': reviews_df['sentiment_type'].value_counts().to_dict(),
        'rating_distribution': reviews_df['rating'].value_counts().to_dict(),
        'categories': reviews_df['product_category'].unique().tolist()
    }
    
    metadata_path = settings.RAW_DATA_DIR / "metadata.json"
    with open(metadata_path, 'w', encoding='utf-8') as f:
        json.dump(metadata, f, indent=2, ensure_ascii=False)
    
    print(f"   - M√©tadonn√©es : {metadata_path}")
    print("\n‚ú® G√©n√©ration termin√©e avec succ√®s !")

if __name__ == "__main__":
    main()
